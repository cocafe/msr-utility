#
# Run once and exit
#
# OneShot=1

#
# Daemon check interval
#
WatchdogIntervalMS=30000

#
# Watch and set a general MSR register
#
# MSRGeneralRegLock=CPUx, Reg, EDX(63-32), EAX(31-0)

#
# Physical Memory Lock
#
# PhysicalMemoryLock=0x0000000000FFEEFF, 0x063C2047
# PhysicalMemoryLock=0x0000000000FFEEFF, 0xC0CAFE11

#
# XEON E5-2683 V4
#

# Uncore Ratio: 12 - 28 (Package)
# 6:0  MAX_RATIO
# 14:8 MIN_RATIO
#
# Lock to maximum to get highest performance
#
MSRGeneralRegLock=0, 0x00000620, 0x00000000, 0x00000c1c

# IA32_ENERGY_PERF_BIAS (Package/Core/Thread Generation Variants, [PACKAGE] here)
# 0x0: Max Perf
# 0xF: Max PowerSaving
#
# Depends on MSR 0x1aa BIT(1) [Energy/Performance Bias Enable] = 1
#
MSRGeneralRegLock=0, 0x000001b0, 0x00000000, 0x00000000

# MSR_PKG_CST_CONFIG_CONTROL (Core)
# Bit 2:0 Package C-State Limit
#       000: C0/C1
#       001: C2
#       010: C6 (non-retention)
#       011: C6 (retention)
#       111: All C-State are available
# Bit 10 I/O MWAIT Redirection Enabled
# Bit 15 CFGLOCK
# Bit 16 Automatic C-State Conversion Enabled (will enabled C-state)
# Bit 25 C3 Auto Demotion Enabled
# Bit 26 C1 Auto Demotion Enabled
# Bit 27 C3 Undemotion Enabled
# Bit 28 C1 Undemotion Enabled
# Bit 29 Package C State Demotion Enabled
# Bit 30 Package C State Undemotion Enabled
#
# MSRGeneralRegLock=0,  0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=2,  0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=4,  0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=6,  0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=8,  0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=10, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=12, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=14, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=16, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=18, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=20, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=22, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=24, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=26, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=28, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=30, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=31, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=33, 0x000000e2, 0x00000000, 0x7e010407
# MSRGeneralRegLock=34, 0x000000e2, 0x00000000, 0x7e010407

#
# Mailbox MSR
#
# MailboxRegGet=REG, EDX, EAX : write EDX, EAX to REG, and Read REG
# MailboxRegRet=REG, EDX, EAX : EDX, EAX value to compare with the read results
# MailboxRegSet=REG, EDX, EAX : if not match values defined in Ret, set with these
#

#
# MSR 0x150:
#
# 0x80000 0 1 1 F9A00000
# ------- - - - --------
#    |    | | |     |
#  const  | | |  voltage offset
#         | | 0: read 1: write 
#         |const 
#       plane idx
#
# Plane Idx | VID
# ----------|-----
#         0 | IA
#         1 | iGPU
#         2 | LLC/Ring
#         3 | System Agent
#
# Voltage offset computation:
# One step might be 1mV (hwmonitor) or 1.024mV (throttlestop)
# Take unit 1mV here, value 128 to get 128mV,
# left shift 21, gets offset 0x10000000.
# If negative number is wanted, two's complement applies.
#
# Lazy way:
# Set desired voltage value in ThrottleStop,
# read the register value of voltage plane just set, that is it.
#

#
# FIVR LLC/Ring: +128mV
#
# MailboxRegLock=0x00000150
# MailboxRegGet=0x00000150, 0x80000210, 0x00000000
# MailboxRegSet=0x00000150, 0x80000211, 0x10000000
# MailboxRegRet=0x00000150, 0x00000200, 0x10000000

#
# FIVR IA Core: -50mV
#
# MailboxRegLock=0x00000150, 0
# MailboxRegGet=0x00000150, 0x80000010, 0x00000000
# MailboxRegSet=0x00000150, 0x80000011, 0xf9c00000
# MailboxRegRet=0x00000150, 0x00000000, 0xf9c00000

#
# FIVR System Agent:
#
# Default voltage +307mV is too high,
# to reduce heat and power comsuption and still maintain stability...
#
# Due to heat reduced, benchmark score still maintain
# relativly higher after several runs...
#
#
# +256mV
#
# MailboxRegLock=0x00000150, 0
# MailboxRegGet=0x00000150, 0x80000310, 0x00000000
# MailboxRegSet=0x00000150, 0x80000311, 0x20000000
# MailboxRegRet=0x00000150, 0x00000300, 0x20000000
#
# +128mV
#
# MailboxRegLock=0x00000150, 0
# MailboxRegGet=0x00000150, 0x80000310, 0x00000000
# MailboxRegSet=0x00000150, 0x80000311, 0x10000000
# MailboxRegRet=0x00000150, 0x00000300, 0x10000000
#
# +50mV
#
# MailboxRegLock=0x00000150, 0
# MailboxRegGet=0x00000150, 0x80000310, 0x00000000
# MailboxRegSet=0x00000150, 0x80000311, 0x06400000
# MailboxRegRet=0x00000150, 0x00000300, 0x06400000
#
# +0mV
#
MailboxRegLock=0x00000150, 0
MailboxRegGet=0x00000150, 0x80000310, 0x00000000
MailboxRegSet=0x00000150, 0x80000311, 0x00000000
MailboxRegRet=0x00000150, 0x00000300, 0x00000000